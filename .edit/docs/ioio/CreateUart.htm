
<!DOCTYPE html> 
<html>

<head>
	<title>CreateUart</title> 
		<meta name="viewport" content="width=device-width, initial-scale=1"> 
		<link rel="stylesheet"  href="../css/themes/default/theme.min.css" />
		<link rel="stylesheet"  href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css" />
		<script src="../js/energize-min.js"></script>
		<script src="../js/jquery-1.8.1.min.js"></script>
		<script src="../../../app.js"></script>
		<script src="../js/example.js"></script>
		<link rel="stylesheet" href="../css/docs.css" />
		<script src="../js/jquery.mobile-1.2.0.min.js"></script>
</head> 

<body> 

<div data-role="page" data-theme="a">

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' data-theme="c" onclick="history.back(); return false">Back</a> <h1>CreateUart</h1>
	</div><!-- /header -->

	<div data-role="content">	
			
		<p> The <b>CreateUart</b> function creates an object which manages UART input and output for two pins on the IOIO board.</p>
		
		<div class="samp">&nbsp;uart = ioio.CreateUart( pinNumIn, pinNumOut, baud, parity, stopBits, mode );</div>
	
		<p>Put the pin numbers you wish to use in the <b>pinNumIn</b> and <b>pinNumOut</b> parameters 
		(Pins 3-7, 10-14, 27-32, 34-40 and 45-48 can be used with UART).  Use <b>null</b> instead of a pin number if you
		don't need one of the pins.</p>
		
		<p>The <b>baud</b> parameter should contain your chosen communication speed which can be 9600, 19200, 38400 or 115200.
		Set the <b>parity</b> parameter to "None", "Odd" or "Even" and <b>stopBits</b> to the number of stop bits
		you require (usually 1 or 2).</p>  
		
		<p>Options for the <b>mode</b> parameter are <b>"OpenDrain"</b> which affects the output pin,
		<b>"PullUp"</b> or <b>"PullDown"</b> which affects the input pin, <b>Text</b> which allows transmission of text characters
		or <b>Hex</b> which allows you to use comma seperated hex codes. Multiple modes are combined using a comma (eg. "PullUp,OpenDrain,Hex").
		</p>
		
		<p>If you leave out the <b>mode</b> parameter, the output pin will be opened in normal mode where pulses will switch between 0 and 3.3V.  
		If you require a <b>5V output</b> you will need to add the <b>"OpenDrain"</b> option to the mode parameter and use a 10K resistor between the
		the 5V supply and the output pin (be careful as only the pins marked with circles are <b>5V tolerant</b>).</b></p>
		
		<p>A maximum of 4 UART's can be created at the same time.</p>
		
		<p>See <a href="http://github.com/ytai/ioio/wiki/UART" target="_blank"> http://github.com/ytai/ioio/wiki/UART </a> for more details.</p>
		
		<p>	Once the UART object is created, you can use the <b>SetOnReceive</b> function to set a callback function which will be called every time 
			data is received in the input pin. </p>
		
		<div class="samp">&nbsp;uart.SetOnReceive( callbackFunc );</div>
		
		<p>	If you want the UART object to automatically split your input data into chunks and only call the callback when a full chunk has been 
		received, you can use the <b>SetSplitMode</b> function. This is useful if the device you are communicating with sends messages of a 
		fixed length or certain start/end codes.</p>
		
		<div class="samp">&nbsp;uart.SetSplitMode( "Size", 2 );</div>
		<div class="samp">&nbsp;uart.SetSplitMode( "End", 0xFC );</div>
		<div class="samp">&nbsp;uart.SetSplitMode( "End", "FF" );</div>
		<div class="samp">&nbsp;uart.SetSplitMode( "End", "." );</div>
		<div class="samp">&nbsp;uart.SetSplitMode( "Start-End", 0xfa, 0xfc );</div>
		
		<p>	You can optionally set a timeout value using the <b>SetTimeout</b> function which will cause the internal buffer
			used by the splitter to be automatically cleared when nothing is received for a given number of milliseconds.</p>
		
		<div class="samp">&nbsp;uart.SetTimeout( millisecs );</div>
		
		<br>
		<p>The following examples simply require pins 7 and 10 connected to each other. </p>
		
		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Example - Send and recieve text with end code</h3>
			<div id="examp1" style="font-size:70%">
				function OnStart()<br>
				{<br>
					&nbsp;&nbsp;ioio = app.CreateIOIO();<br>
					&nbsp;&nbsp;ioio.SetOnConnect( ioio_OnConnect );<br>
					&nbsp;&nbsp;ioio.CheckConnection();<br>
				}<br><br>
				function ioio_OnConnect()<br>
				{<br>
					<b id="snip1"  style="font-size:100%">
					&nbsp;&nbsp;uart = ioio.CreateUart( 7, 10, 9600, "None", 1, "Text" );<br>
					&nbsp;&nbsp;uart.SetOnReceive( uart_OnReceive );<br>
					&nbsp;&nbsp;uart.SetSplitMode( "End", "." );<br>
					&nbsp;&nbsp;uart.Write( "Hello." );<br>
					</b>
				}<br><br>
				function uart_OnReceive( data ) <br>
				{<br>
					&nbsp;&nbsp;app.ShowPopup( data );<br>
				}
			</div>
			<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip1)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp1)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp1)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>
		
		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Example - Send and recieve data with end code</h3>
			<div id="examp2" style="font-size:70%">
				function OnStart()<br>
				{<br>
					&nbsp;&nbsp;ioio = app.CreateIOIO();<br>
					&nbsp;&nbsp;ioio.SetOnConnect( ioio_OnConnect );<br>
					&nbsp;&nbsp;ioio.CheckConnection();<br>
				}<br><br>
				function ioio_OnConnect()<br>
				{<br>
					<b id="snip2"  style="font-size:100%">
					&nbsp;&nbsp;uart = ioio.CreateUart( 7, 10, 9600, "None", 1 );<br>
					&nbsp;&nbsp;uart.SetOnReceive( uart_OnReceive );<br>
					&nbsp;&nbsp;uart.SetSplitMode( "End", 0xFF );<br>
					&nbsp;&nbsp;uart.Write( [0xA1,0xA2,0xA3,0xFF] );<br>
					</b>
				}<br><br>
				function uart_OnReceive( data ) <br>
				{<br>
					&nbsp;&nbsp;app.ShowPopup( data );<br>
				}
			</div>
			<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip2)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp2)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp2)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div>
		
		<div data-role="collapsible" data-collapsed="true"  data-mini="true" data-theme="a" data-content-theme="b">
			<h3>Example - Send and recieve data of fixed length</h3>
			<div id="examp3" style="font-size:70%">
				function OnStart()<br>
				{<br>
					&nbsp;&nbsp;ioio = app.CreateIOIO();<br>
					&nbsp;&nbsp;ioio.SetOnConnect( ioio_OnConnect );<br>
					&nbsp;&nbsp;ioio.CheckConnection();<br>
				}<br><br>
				function ioio_OnConnect()<br>
				{<br>
					<b id="snip3"  style="font-size:100%">
					&nbsp;&nbsp;uart = ioio.CreateUart( 7, 10, 9600, "None", 1 );<br>
					&nbsp;&nbsp;uart.SetOnReceive( uart_OnReceive );<br>
					&nbsp;&nbsp;uart.SetSplitMode( "Size", 3 );<br>
					&nbsp;&nbsp;uart.Write( [0xA1,0xA2,0xA3] );<br>
					</b>
				}<br><br>
				function uart_OnReceive( data ) <br>
				{<br>
					&nbsp;&nbsp;app.ShowPopup( data );<br>
				}
			</div>
			<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(snip3)">&nbsp;&nbsp;Copy&nbsp;&nbsp;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy(examp3)">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo(examp3)">&nbsp;&nbsp;&nbsp;Run&nbsp;&nbsp;&nbsp;</a>
			</div>
		</div><br>	
	
	</div><!-- /content -->
	
</div><!-- /page -->

</body>
</html>